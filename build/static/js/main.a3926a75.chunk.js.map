{"version":3,"sources":["context/ExpenseContext.js","components/ExpenseForm.js","components/ExpenseItem.js","components/ExpenseList.js","components/ExpenseTotal.js","components/Alert.js","App.js","serviceWorker.js","index.js"],"names":["ExpenseContext","createContext","ExpenseProvider","props","initialExpenses","localStorage","getItem","JSON","parse","useState","expenses","setExpenses","editId","setEditId","charge","setCharge","amount","setAmount","alert","setAlert","useEffect","setItem","stringify","Provider","value","type","text","show","setTimeout","children","ExpenseForm","useContext","showAlert","onSubmit","e","preventDefault","newExpense","id","uuid","tempExpenses","map","item","className","htmlFor","name","placeholder","onChange","target","ExpenseItem","expense","aria-label","onClick","find","expList","filter","handleDelete","ExpenseList","exp","key","length","window","confirm","ExpenseTotal","reduce","acc","curr","parseInt","Alert","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a3926a75.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from 'react'\r\n\r\nexport const ExpenseContext = createContext()\r\n\r\nexport const ExpenseProvider = (props) => {\r\n   // const initialExpenses = [\r\n   //    { id: uuid(), charge: 'rent', amount: 1600 },\r\n   //    { id: uuid(), charge: 'car payment', amount: 400 },\r\n   // ]\r\n   const initialExpenses = localStorage.getItem('expenses')\r\n      ? JSON.parse(localStorage.getItem('expenses'))\r\n      : []\r\n\r\n   const [expenses, setExpenses] = useState(initialExpenses)\r\n   const [editId, setEditId] = useState('')\r\n   const [charge, setCharge] = useState('')\r\n   const [amount, setAmount] = useState('')\r\n   const [alert, setAlert] = useState('')\r\n\r\n   useEffect(() => {\r\n      localStorage.setItem('expenses', JSON.stringify(expenses))\r\n   }, [expenses])\r\n\r\n   const showAlert = (type, text) => {\r\n      debugger\r\n      setAlert({ show: true, type, text })\r\n      setTimeout(() => {\r\n         setAlert({ show: false })\r\n      }, 3000)\r\n   }\r\n\r\n   return (\r\n      <ExpenseContext.Provider\r\n         value={[\r\n            expenses,\r\n            setExpenses,\r\n            editId,\r\n            setEditId,\r\n            charge,\r\n            setCharge,\r\n            amount,\r\n            setAmount,\r\n            alert,\r\n            setAlert,\r\n            showAlert,\r\n         ]}\r\n      >\r\n         {props.children}\r\n      </ExpenseContext.Provider>\r\n   )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport '../App.css'\r\nimport { MdSend } from 'react-icons/md'\r\nimport { ExpenseContext } from '../context/ExpenseContext'\r\nimport { v4 as uuid } from 'uuid'\r\n\r\nconst ExpenseForm = () => {\r\n   const [\r\n      expenses,\r\n      setExpenses,\r\n      editId,\r\n      setEditId,\r\n      charge,\r\n      setCharge,\r\n      amount,\r\n      setAmount,\r\n      alert,\r\n      setAlert,\r\n      showAlert\r\n   ] = useContext(ExpenseContext)\r\n\r\n   const handleSubmit = (e) => {\r\n      debugger\r\n      e.preventDefault()\r\n      if (charge === '' || amount === 0) {\r\n         showAlert('danger', 'Invalid value')\r\n         // setAlert({ show: true, type: 'danger', text: 'Invalid value' })\r\n         // setTimeout(() => {\r\n         //    setAlert({ show: false })\r\n         // }, 3000)\r\n      } else if (editId === '') {\r\n         const newExpense = { id: uuid(), charge, amount }\r\n         setExpenses([...expenses, newExpense])\r\n         showAlert('success', 'Item added')\r\n         // setAlert({ show: true, type: 'success', text: 'Item added' })\r\n         // setTimeout(() => {\r\n         //    setAlert({ show: false })\r\n         // }, 3000)\r\n         setCharge('')\r\n         setAmount('')\r\n      } else {\r\n         //  const expList = [...expenses]\r\n         //  const idx = expList.findIndex((e) => e.id === editId)\r\n         //  expList[idx].charge = charge\r\n         //  expList[idx].amount = amount\r\n         //  setExpenses(expList)\r\n         const tempExpenses = expenses.map((item) =>\r\n            item.id === editId ? { ...item, charge, amount } : item\r\n         )\r\n         setExpenses(tempExpenses)\r\n         showAlert('success', 'Item edited')\r\n         // setAlert({ show: true, type: 'success', text: 'Item edited' })\r\n         // setTimeout(() => {\r\n         //    setAlert({ show: false })\r\n         // }, 3000)\r\n         setEditId('')\r\n         setCharge('')\r\n         setAmount('')\r\n      }\r\n   }\r\n\r\n   return (\r\n      <>\r\n         {/* {alert.show && <Alert />} */}\r\n\r\n         <form onSubmit={handleSubmit}>\r\n            <div className='form-center'>\r\n               <div className='form-group'>\r\n                  <label htmlFor='charge'>Charge</label>\r\n                  <input\r\n                     type='text'\r\n                     className='form-control'\r\n                     id='charge'\r\n                     name='charge'\r\n                     placeholder='e.g. rent'\r\n                     value={charge}\r\n                     onChange={(e) => setCharge(e.target.value)}\r\n                  />\r\n               </div>\r\n               <div className='form-group'>\r\n                  <label htmlFor='amount'>Amount</label>\r\n                  <input\r\n                     type='number'\r\n                     className='form-control'\r\n                     id='amount'\r\n                     name='amount'\r\n                     placeholder='e.g. 123'\r\n                     value={amount}\r\n                     onChange={(e) => setAmount(e.target.value)}\r\n                  />\r\n               </div>\r\n            </div>\r\n            <button type='submit' className='btn'>\r\n               {editId !== '' ? 'Edit' : 'Submit'}\r\n               <MdSend className='btn-icon' />\r\n            </button>\r\n            <br />\r\n         </form>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default ExpenseForm\r\n","import React, { useContext } from 'react'\r\nimport '../App.css'\r\nimport { MdEdit, MdDelete } from 'react-icons/md'\r\nimport { ExpenseContext } from '../context/ExpenseContext'\r\n\r\nconst ExpenseItem = ({ expense }) => {\r\n   const [\r\n      expenses,\r\n      setExpenses,\r\n      editId,\r\n      setEditId,\r\n      charge,\r\n      setCharge,\r\n      amount,\r\n      setAmount,\r\n      alert,\r\n      setAlert,\r\n      showAlert\r\n   ] = useContext(ExpenseContext)\r\n\r\n   // console.log(useContext(ExpenseContext))\r\n\r\n   const handleEdit = (id) => {\r\n      debugger\r\n      setCharge(expenses.find((e) => e.id === id).charge)\r\n      setAmount(expenses.find((e) => e.id === id).amount)\r\n      setEditId(id)\r\n   }\r\n\r\n   const handleDelete = (id) => {\r\n      const expList = expenses.filter((e) => e.id !== id)\r\n      setExpenses(expList)\r\n\r\n      showAlert('success', 'Item deleted')\r\n      // setAlert({ show: true, type: 'success', text: 'Item deleted' })\r\n      // setTimeout(() => {\r\n      //    setAlert({ show: false })\r\n      // }, 3000)\r\n   }\r\n\r\n   return (\r\n      <li className='item'>\r\n         <div className='info'>\r\n            <span className='expense'>{expense.charge}</span>\r\n            <span className='amount'>${expense.amount}</span>\r\n         </div>\r\n         <div>\r\n            <button\r\n               className='edit-btn'\r\n               aria-label='edit button'\r\n               onClick={() => handleEdit(expense.id)}\r\n            >\r\n               <MdEdit />\r\n            </button>\r\n            <button\r\n               className='clear-btn'\r\n               aria-label='delete button'\r\n               onClick={() => handleDelete(expense.id)}\r\n            >\r\n               <MdDelete />\r\n            </button>\r\n         </div>\r\n      </li>\r\n   )\r\n}\r\n\r\nexport default ExpenseItem\r\n","import React, { useContext } from 'react'\r\nimport '../App.css'\r\nimport ExpenseItem from '../components/ExpenseItem'\r\nimport { FiTrash } from 'react-icons/fi'\r\nimport { ExpenseContext } from '../context/ExpenseContext'\r\n\r\nfunction ExpenseList() {\r\n   const [\r\n      expenses,\r\n      setExpenses,\r\n      editId,\r\n      setEditId,\r\n      charge,\r\n      setCharge,\r\n      amount,\r\n      setAmount,\r\n      alert,\r\n      setAlert,\r\n      showAlert,\r\n   ] = useContext(ExpenseContext)\r\n\r\n   const handleClearAll = () => {\r\n      if (window.confirm('Are you sure you want to clear all items?')) {\r\n         setExpenses([])\r\n         showAlert('success', 'All items cleared')\r\n      }\r\n   }\r\n\r\n   return (\r\n      <div>\r\n         {/* {alert.show && <Alert alert={alert} />} */}\r\n         {expenses.map((exp) => (\r\n            <ExpenseItem key={exp.id} expense={exp} />\r\n         ))}\r\n\r\n         {expenses.length > 0 && (\r\n            <button className='btn' onClick={handleClearAll}>\r\n               Clear Expenses\r\n               <FiTrash className='btn-icon'></FiTrash>\r\n            </button>\r\n         )}\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default ExpenseList\r\n","import React, { useContext } from 'react'\r\nimport '../App.css'\r\nimport { ExpenseContext } from '../context/ExpenseContext'\r\n\r\nconst ExpenseTotal = () => {\r\n   const [expenses] = useContext(ExpenseContext)\r\n\r\n   return (\r\n      <h1>\r\n         Total Spending:\r\n         <span className='total'>\r\n            {expenses.reduce((acc, curr) => acc + parseInt(curr.amount), 0)}\r\n         </span>\r\n      </h1>\r\n   )\r\n}\r\n\r\nexport default ExpenseTotal\r\n","import React from 'react'\r\nimport '../App.css'\r\nimport { useContext } from 'react'\r\nimport { ExpenseContext } from '../context/ExpenseContext'\r\n\r\nconst Alert = () => {\r\n   const [\r\n      expenses,\r\n      setExpenses,\r\n      editId,\r\n      setEditId,\r\n      charge,\r\n      setCharge,\r\n      amount,\r\n      setAmount,\r\n      alert,\r\n      setAlert,\r\n      showAlert,\r\n   ] = useContext(ExpenseContext)\r\n\r\n   debugger\r\n\r\n   return (\r\n      <>\r\n         {alert.show && (\r\n            <div className={`alert alert-${alert.type}`}>{alert.text}</div>\r\n         )}\r\n      </>\r\n   )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\nimport ExpenseForm from './components/ExpenseForm'\r\nimport ExpenseList from './components/ExpenseList'\r\nimport { ExpenseProvider } from './context/ExpenseContext'\r\nimport ExpenseTotal from './components/ExpenseTotal'\r\nimport Alert from './components/Alert'\r\n\r\nfunction App() {\r\n   return (\r\n      <>\r\n         <ExpenseProvider className='App'>\r\n            <Alert />\r\n            <h1>Expense Tracker</h1>\r\n            <main className='App'>\r\n               <ExpenseForm />\r\n               <ExpenseList />\r\n            </main>\r\n            <ExpenseTotal />\r\n         </ExpenseProvider>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}