{"version":3,"sources":["components/ExpenseForm.js","components/ExpenseItem.js","components/ExpenseList.js","components/Alert.js","App.js","serviceWorker.js","index.js"],"names":["ExpenseForm","charge","amount","handleCharge","handleAmount","handleSubmit","editMode","onSubmit","className","htmlFor","type","id","name","placeholder","value","onChange","e","target","ExpenseItem","expense","handleEdit","handleDelete","aria-label","onClick","ExpenseList","expenses","handleClearAll","map","exp","key","length","Alert","alert","text","initialExpenses","localStorage","getItem","JSON","parse","App","useState","setExpenses","editId","setEditId","setCharge","setAmount","setAlert","useEffect","setItem","stringify","handleAlert","show","setTimeout","preventDefault","newExpense","uuid","tempExpenses","item","window","confirm","find","expList","filter","reduce","acc","curr","parseInt","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wPAgDeA,EA7CK,SAAC,GAOd,IANJC,EAMG,EANHA,OACAC,EAKG,EALHA,OACAC,EAIG,EAJHA,aACAC,EAGG,EAHHA,aACAC,EAEG,EAFHA,aACAC,EACG,EADHA,SAEA,OACG,0BAAMC,SAAUF,GACb,yBAAKG,UAAU,eACZ,yBAAKA,UAAU,cACZ,2BAAOC,QAAQ,UAAf,UACA,2BACGC,KAAK,OACLF,UAAU,eACVG,GAAG,SACHC,KAAK,SACLC,YAAY,YACZC,MAAOb,EACPc,SAAU,SAACC,GAAD,OAAOb,EAAaa,EAAEC,OAAOH,WAG7C,yBAAKN,UAAU,cACZ,2BAAOC,QAAQ,UAAf,UACA,2BACGC,KAAK,SACLF,UAAU,eACVG,GAAG,SACHC,KAAK,SACLC,YAAY,WACZC,MAAOZ,EACPa,SAAU,SAACC,GAAD,OAAOZ,EAAaY,EAAEC,OAAOH,YAIhD,4BAAQJ,KAAK,SAASF,UAAU,OAC5BF,EAAW,OAAS,SACrB,kBAAC,IAAD,CAAQE,UAAU,cAErB,+BCXMU,EA7BK,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,QAASC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,aAGzC,OACG,wBAAIb,UAAU,QACX,yBAAKA,UAAU,QACZ,0BAAMA,UAAU,WAAWW,EAAQlB,QACnC,0BAAMO,UAAU,UAAhB,IAA2BW,EAAQjB,SAEtC,6BACG,4BACGM,UAAU,WACVc,aAAW,cACXC,QAAS,kBAAMH,EAAWD,EAAQR,MAElC,kBAAC,IAAD,OAEH,4BACGH,UAAU,YACVc,aAAW,gBACXC,QAAS,kBAAMF,EAAaF,EAAQR,MAEpC,kBAAC,IAAD,U,OCCAa,MAtBf,YAA8E,IAAvDC,EAAsD,EAAtDA,SAAUC,EAA4C,EAA5CA,eAAgBN,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,aAC1D,OACG,6BACII,EAASE,KAAI,SAACC,GAAD,OACX,kBAAC,EAAD,CACGC,IAAKD,EAAIjB,GACTQ,QAASS,EACTR,WAAYA,EACZC,aAAcA,OAInBI,EAASK,OAAS,GAChB,4BAAQtB,UAAU,MAAMe,QAASG,GAAjC,iBAEG,kBAAC,IAAD,CAASlB,UAAU,gBCbnBuB,EAJD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACd,OAAO,yBAAKxB,UAAS,sBAAiBwB,EAAMtB,OAASsB,EAAMC,O,QCcxDC,EAAkBC,aAAaC,QAAQ,YACxCC,KAAKC,MAAMH,aAAaC,QAAQ,aAChC,GAkGUG,MAhGf,WAAe,MAEoBC,mBAASN,GAF7B,mBAELT,EAFK,KAEKgB,EAFL,OAGgBD,mBAAS,IAHzB,mBAGLE,EAHK,KAGGC,EAHH,OAIgBH,mBAAS,IAJzB,mBAILvC,EAJK,KAIG2C,EAJH,OAKgBJ,mBAAS,IALzB,mBAKLtC,EALK,KAKG2C,EALH,OAMcL,mBAAS,IANvB,mBAMLR,EANK,KAMEc,EANF,KAQZC,qBAAU,WACPZ,aAAaa,QAAQ,WAAYX,KAAKY,UAAUxB,MAChD,CAACA,IAEJ,IAAMyB,EAAc,SAACxC,EAAMuB,GACxBa,EAAS,CAAEK,MAAM,EAAMzC,OAAMuB,SAC7BmB,YAAW,WACRN,EAAS,CAAEK,MAAM,MACjB,MAkDN,OACG,oCACInB,EAAMmB,MAAQ,kBAAC,EAAD,CAAOnB,MAAOA,IAC7B,+CACA,0BAAMxB,UAAU,OACb,kBAAC,EAAD,CACGP,OAAQA,EACRC,OAAQA,EACRE,aAAcyC,EACd1C,aAAcyC,EACdvC,aAzDS,SAACW,GAGnB,GADAA,EAAEqC,iBACa,KAAXpD,GAA4B,IAAXC,EAClBgD,EAAY,SAAU,sBAClB,GAAe,KAAXR,EAAe,CACvB,IAAMY,EAAa,CAAE3C,GAAI4C,cAAQtD,SAAQC,UACzCuC,EAAY,GAAD,mBAAKhB,GAAL,CAAe6B,KAC1BJ,EAAY,UAAW,cACvBN,EAAU,IACVC,EAAU,QACN,CAMJ,IAAMW,EAAe/B,EAASE,KAAI,SAAC8B,GAAD,OAC/BA,EAAK9C,KAAO+B,EAAZ,eAA0Be,EAA1B,CAAgCxD,SAAQC,WAAWuD,KAEtDhB,EAAYe,GACZb,EAAU,IACVC,EAAU,IACVC,EAAU,MAmCJvC,SAAqB,KAAXoC,IAEb,kBAAC,EAAD,CACGjB,SAAUA,EACVC,eAnCW,WAChBgC,OAAOC,QAAQ,+CAChBlB,EAAY,IACZS,EAAY,UAAW,uBAiCjB9B,WA7BO,SAACT,GAEjBiC,EAAUnB,EAASmC,MAAK,SAAC5C,GAAD,OAAOA,EAAEL,KAAOA,KAAIV,QAC5C4C,EAAUpB,EAASmC,MAAK,SAAC5C,GAAD,OAAOA,EAAEL,KAAOA,KAAIT,QAC5CyC,EAAUhC,IA0BDU,aAvBS,SAACV,GACnB,IAAMkD,EAAUpC,EAASqC,QAAO,SAAC9C,GAAD,OAAOA,EAAEL,KAAOA,KAChD8B,EAAYoB,GACZX,EAAY,UAAW,oBAuBpB,8CACmB,IAChB,0BAAM1C,UAAU,SACZiB,EAASsC,QAAO,SAACC,EAAKC,GAAN,OAAeD,EAAME,SAASD,EAAK/D,UAAS,OClGxDiE,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e1c256e4.chunk.js","sourcesContent":["import React from 'react'\r\nimport { MdSend } from 'react-icons/md'\r\n\r\nconst ExpenseForm = ({\r\n   charge,\r\n   amount,\r\n   handleCharge,\r\n   handleAmount,\r\n   handleSubmit,\r\n   editMode,\r\n}) => {\r\n   return (\r\n      <form onSubmit={handleSubmit}>\r\n         <div className='form-center'>\r\n            <div className='form-group'>\r\n               <label htmlFor='charge'>Charge</label>\r\n               <input\r\n                  type='text'\r\n                  className='form-control'\r\n                  id='charge'\r\n                  name='charge'\r\n                  placeholder='e.g. rent'\r\n                  value={charge}\r\n                  onChange={(e) => handleCharge(e.target.value)}\r\n               />\r\n            </div>\r\n            <div className='form-group'>\r\n               <label htmlFor='amount'>Amount</label>\r\n               <input\r\n                  type='number'\r\n                  className='form-control'\r\n                  id='amount'\r\n                  name='amount'\r\n                  placeholder='e.g. 123'\r\n                  value={amount}\r\n                  onChange={(e) => handleAmount(e.target.value)}\r\n               />\r\n            </div>\r\n         </div>\r\n         <button type='submit' className='btn'>\r\n            {editMode ? 'Edit' : 'Submit'}\r\n            <MdSend className='btn-icon' />\r\n         </button>\r\n         <br />\r\n      </form>\r\n   )\r\n}\r\n\r\nexport default ExpenseForm\r\n","import React from 'react'\r\nimport { MdEdit, MdDelete } from 'react-icons/md'\r\n\r\nconst ExpenseItem = ({ expense, handleEdit, handleDelete }) => {\r\n   //    debugger\r\n\r\n   return (\r\n      <li className='item'>\r\n         <div className='info'>\r\n            <span className='expense'>{expense.charge}</span>\r\n            <span className='amount'>${expense.amount}</span>\r\n         </div>\r\n         <div>\r\n            <button\r\n               className='edit-btn'\r\n               aria-label='edit button'\r\n               onClick={() => handleEdit(expense.id)}\r\n            >\r\n               <MdEdit />\r\n            </button>\r\n            <button\r\n               className='clear-btn'\r\n               aria-label='delete button'\r\n               onClick={() => handleDelete(expense.id)}\r\n            >\r\n               <MdDelete />\r\n            </button>\r\n         </div>\r\n      </li>\r\n   )\r\n}\r\n\r\nexport default ExpenseItem\r\n","import React from 'react'\r\nimport ExpenseItem from '../components/ExpenseItem'\r\nimport { FiTrash } from 'react-icons/fi'\r\n\r\nfunction ExpenseList({ expenses, handleClearAll, handleEdit, handleDelete }) {\r\n   return (\r\n      <div>\r\n         {expenses.map((exp) => (\r\n            <ExpenseItem\r\n               key={exp.id}\r\n               expense={exp}\r\n               handleEdit={handleEdit}\r\n               handleDelete={handleDelete}\r\n            />\r\n         ))}\r\n\r\n         {expenses.length > 0 && (\r\n            <button className='btn' onClick={handleClearAll}>\r\n               Clear Expenses\r\n               <FiTrash className='btn-icon'></FiTrash>\r\n            </button>\r\n         )}\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default ExpenseList\r\n","import React from 'react'\r\n\r\nconst Alert = ({ alert }) => {\r\n   return <div className={`alert alert-${alert.type}`}>{alert.text}</div>\r\n}\r\n\r\nexport default Alert\r\n","import React, { useState, useEffect } from 'react'\r\nimport './App.css'\r\nimport ExpenseForm from './components/ExpenseForm'\r\nimport ExpenseList from './components/ExpenseList'\r\nimport Alert from './components/Alert'\r\nimport { v4 as uuid } from 'uuid'\r\n\r\n// const initialExpenses = [\r\n//    { id: uuid(), charge: 'rent', amount: 1600 },\r\n//    { id: uuid(), charge: 'car payment', amount: 400 },\r\n//    {\r\n//       id: uuid(),\r\n//       charge: 'credit card bill ',\r\n//       amount: 1200,\r\n//    },\r\n// ]\r\n\r\nconst initialExpenses = localStorage.getItem('expenses')\r\n   ? JSON.parse(localStorage.getItem('expenses'))\r\n   : []\r\n\r\nfunction App() {\r\n   // all expenses, add expense\r\n   const [expenses, setExpenses] = useState(initialExpenses)\r\n   const [editId, setEditId] = useState('')\r\n   const [charge, setCharge] = useState('')\r\n   const [amount, setAmount] = useState('')\r\n   const [alert, setAlert] = useState('')\r\n\r\n   useEffect(() => {\r\n      localStorage.setItem('expenses', JSON.stringify(expenses))\r\n   }, [expenses])\r\n\r\n   const handleAlert = (type, text) => {\r\n      setAlert({ show: true, type, text })\r\n      setTimeout(() => {\r\n         setAlert({ show: false })\r\n      }, 3000)\r\n   }\r\n\r\n   const handleSubmit = (e) => {\r\n      debugger\r\n      e.preventDefault()\r\n      if (charge === '' || amount === 0) {\r\n         handleAlert('danger', 'Invalid value')\r\n      } else if (editId === '') {\r\n         const newExpense = { id: uuid(), charge, amount }\r\n         setExpenses([...expenses, newExpense])\r\n         handleAlert('success', 'Item added')\r\n         setCharge('')\r\n         setAmount('')\r\n      } else {\r\n         //  const expList = [...expenses]\r\n         //  const idx = expList.findIndex((e) => e.id === editId)\r\n         //  expList[idx].charge = charge\r\n         //  expList[idx].amount = amount\r\n         //  setExpenses(expList)\r\n         const tempExpenses = expenses.map((item) =>\r\n            item.id === editId ? { ...item, charge, amount } : item\r\n         )\r\n         setExpenses(tempExpenses)\r\n         setEditId('')\r\n         setCharge('')\r\n         setAmount('')\r\n      }\r\n   }\r\n\r\n   const handleClearAll = () => {\r\n      if (window.confirm('Are you sure you want to clear all items?')) {\r\n         setExpenses([])\r\n         handleAlert('success', 'All items cleared')\r\n      }\r\n   }\r\n\r\n   const handleEdit = (id) => {\r\n      //   window.alert(id)\r\n      setCharge(expenses.find((e) => e.id === id).charge)\r\n      setAmount(expenses.find((e) => e.id === id).amount)\r\n      setEditId(id)\r\n   }\r\n\r\n   const handleDelete = (id) => {\r\n      const expList = expenses.filter((e) => e.id !== id)\r\n      setExpenses(expList)\r\n      handleAlert('success', 'Item deleted')\r\n   }\r\n\r\n   return (\r\n      <>\r\n         {alert.show && <Alert alert={alert} />}\r\n         <h1>Expense Tracker</h1>\r\n         <main className='App'>\r\n            <ExpenseForm\r\n               charge={charge}\r\n               amount={amount}\r\n               handleAmount={setAmount}\r\n               handleCharge={setCharge}\r\n               handleSubmit={handleSubmit}\r\n               editMode={editId !== ''}\r\n            />\r\n            <ExpenseList\r\n               expenses={expenses}\r\n               handleClearAll={handleClearAll}\r\n               handleEdit={handleEdit}\r\n               handleDelete={handleDelete}\r\n            />\r\n         </main>\r\n         <h1>\r\n            total spending:{' '}\r\n            <span className='total'>\r\n               {expenses.reduce((acc, curr) => acc + parseInt(curr.amount), 0)}\r\n            </span>\r\n         </h1>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}